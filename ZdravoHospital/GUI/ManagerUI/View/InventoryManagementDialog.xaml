<Window x:Class="ZdravoHospital.GUI.ManagerUI.View.InventoryManagementDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ZdravoHospital.GUI.ManagerUI.View"
        xmlns:validation="clr-namespace:ZdravoHospital.GUI.ManagerUI.ValidationRules"
        xmlns:converters="clr-namespace:ZdravoHospital.GUI.ManagerUI.Converters"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:beh="clr-namespace:ZdravoHospital.GUI.ManagerUI.Commands"
        mc:Ignorable="d"
        Title="Inventory management"
        SizeToContent="WidthAndHeight"
        WindowStartupLocation="CenterScreen"
        ResizeMode="NoResize">
    <Grid Width="1000" Height="600" Background="Beige">
        <Grid.RowDefinitions>
            <RowDefinition Height="90"/>
            <RowDefinition/>
            <RowDefinition Height="90"/>
        </Grid.RowDefinitions>

        <!-- Error displaying -->
        <Label x:Name="FirstRoomUnavailable" Grid.Row="0" Grid.ColumnSpan="2" Content="Room in the left is unavailable, transferring cannot be done..." FontSize="20" Margin="0,10,0,0" Foreground="Red" FontWeight="SemiBold" FontStyle="Italic" HorizontalAlignment="Center">
            <Label.Style>
                <Style TargetType="Label">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding SenderRoom.Available}" Value="True">
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=FirstRoomComboBox, Path=SelectedIndex}" Value="-1">
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Label.Style>
        </Label>

        <Label x:Name="SecondRoomUnavailable" Grid.Row="0" Grid.ColumnSpan="2" Content="Room in the right is unavailable, transferring cannot be done..." FontSize="20" Margin="0,10,0,0" Foreground="Red" FontWeight="SemiBold" FontStyle="Italic" HorizontalAlignment="Center">
            <Label.Style>
                <Style TargetType="Label">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ReceiverRoom.Available}" Value="True">
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=FirstRoomUnavailable, Path=Visibility}" Value="Visible">
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=SecondRoomComboBox, Path=SelectedIndex}" Value="-1">
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Label.Style>
        </Label>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <!-- Left Grid -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition Height="300"/>
                </Grid.RowDefinitions>

                <Label Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Content="From :" FontSize="18" Width="60" Margin="50,0,0,0"/>

                <ComboBox x:Name="FirstRoomComboBox" ItemsSource="{Binding SenderRooms, Mode=TwoWay}" 
                          SelectedItem="{Binding SenderRoom, Mode=TwoWay}" Grid.Row="1" FontSize="18" HorizontalAlignment="Left"
                          SelectedIndex="{Binding SenderIndex, Mode=TwoWay}"
                          VerticalAlignment="Center" Width="300" Margin="50,0,0,0"
                          IsDropDownOpen="{Binding SenderIsDropDownOpen, Mode=TwoWay}"
                          >
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} - {1}">
                                        <Binding Path="Id"/>
                                        <Binding Path="Name"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                    <ComboBox.InputBindings>
                        <KeyBinding Command="{Binding SenderCombo}" Key="Enter" CommandParameter="Enter"/>
                        <KeyBinding Command="{Binding SenderCombo}" Key="Up" CommandParameter="Up"/>
                        <KeyBinding Command="{Binding SenderCombo}" Key="Down" CommandParameter="Down"/>
                        <KeyBinding Command="{Binding SenderCombo}" Key="Tab" CommandParameter="Tab"/>
                        <KeyBinding Command="{Binding SenderCombo}" Key="Right" CommandParameter="Right"/>
                    </ComboBox.InputBindings>
                    <ComboBox.Style>
                        <Style>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FocusLeftCombo, Mode=TwoWay}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=FirstRoomComboBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.Style>
                </ComboBox>

                <DataGrid x:Name="FirstRoomDataGrid" Grid.Row="3" AutoGenerateColumns="false" IsReadOnly="True" 
                          ItemsSource="{Binding SenderRoomInventory, Mode=TwoWay}" HeadersVisibility="Column" 
                          SelectedItem="{Binding SelectedInventory, Mode=TwoWay}"
                          SelectedIndex="{Binding SenderDataIndex, Mode=TwoWay}"
                          FontSize="18" Margin="20,10,10,10" RowBackground="LightYellow" 
                          AlternatingRowBackground="LightBlue" 
                          >
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>
                        <DataGridTextColumn Header="Quantity" Binding="{Binding Quantity}" Width="*"/>
                        <DataGridTextColumn Header="Type" Binding="{Binding InventoryType, Converter={converters:InventoryTypeConverter}}"/>
                    </DataGrid.Columns>
                    <DataGrid.Style>
                        <Style TargetType="{x:Type DataGrid}">
                            <Setter Property="IsEnabled" Value="True"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=FirstRoomUnavailable, Path=Visibility}" Value="Visible">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=SecondRoomUnavailable, Path=Visibility}" Value="Visible">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=SecondRoomComboBox, Path=SelectedIndex}" Value="-1">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding FocusDataGrid, Mode=TwoWay}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=FirstRoomDataGrid}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Style>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewKeyDown">
                            <i:InvokeCommandAction Command="{Binding DataGridCommand}" PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="GotFocus">
                            <i:InvokeCommandAction Command="{Binding DataGridFocused}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <i:Interaction.Behaviors>
                        <beh:MyBehavior/>
                    </i:Interaction.Behaviors>
                </DataGrid>
            </Grid>

            <!-- Right Grid -->
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition Height="300"/>
                </Grid.RowDefinitions>

                <Label Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Content="To :" FontSize="18" Width="60" Margin="50,0,0,0"/>

                <ComboBox x:Name="SecondRoomComboBox" ItemsSource="{Binding ReceiverRooms, Mode=TwoWay}" 
                          SelectedItem="{Binding ReceiverRoom, Mode=TwoWay}" IsReadOnly="True" Grid.Row="1" 
                          SelectedIndex="{Binding ReceiverIndex, Mode=TwoWay}"
                          FontSize="18" HorizontalAlignment="Left" VerticalAlignment="Center" Width="300" Margin="50,0,0,0" 
                          IsDropDownOpen="{Binding ReceiverIsDropDownOpen, Mode=TwoWay}">
                    <ComboBox.Style>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="IsEnabled" Value="True"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=FirstRoomComboBox, Path=SelectedIndex}" Value="-1">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding FocusRightCombo, Mode=TwoWay}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=SecondRoomComboBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.Style>
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} - {1}">
                                        <Binding Path="Id"/>
                                        <Binding Path="Name"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                    <ComboBox.InputBindings>
                        <KeyBinding Command="{Binding ReceiverCombo}" Key="Enter" CommandParameter="Enter"/>
                        <KeyBinding Command="{Binding ReceiverCombo}" Key="Up" CommandParameter="Up"/>
                        <KeyBinding Command="{Binding ReceiverCombo}" Key="Down" CommandParameter="Down"/>
                        <KeyBinding Command="{Binding ReceiverCombo}" Key="Tab" CommandParameter="Tab"/>
                        <KeyBinding Command="{Binding ReceiverCombo}" Key="Left" CommandParameter="Left"/>
                    </ComboBox.InputBindings>
                </ComboBox>

                <DataGrid x:Name="SecondRoomDataGrid" Grid.Row="3" ItemsSource="{Binding ReceiverRoomInventory, Mode=TwoWay}" 
                          RowBackground="LightYellow" AlternatingRowBackground="LightBlue" AutoGenerateColumns="false" HeadersVisibility="Column" FontSize="18" Margin="10,10,20,10">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>
                        <DataGridTextColumn Header="Quantity" Binding="{Binding Quantity}" Width="*"/>
                        <DataGridTextColumn Header="Type" Binding="{Binding InventoryType, Converter={converters:InventoryTypeConverter}}"/>
                    </DataGrid.Columns>
                    <DataGrid.Style>
                        <Style TargetType="{x:Type DataGrid}">
                            <Setter Property="IsEnabled" Value="False"/>
                        </Style>
                    </DataGrid.Style>
                </DataGrid>
            </Grid>

        </Grid>

        <Button x:Name="FinishButton" Grid.Row="2" FontSize="18" Content="Finish" Background="#bec4c2" Height="52" Width="100">
            <Button.Style>
                <Style>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding FocusFinishButton, Mode=TwoWay}" Value="True">
                            <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=FinishButton}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <i:CallMethodAction MethodName="Close"
                                        TargetObject="{Binding RelativeSource={RelativeSource
                                                  Mode=FindAncestor,
                                                  AncestorType=Window}}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Button>

    </Grid>
</Window>
